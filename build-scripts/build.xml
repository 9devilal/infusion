<project name="Fluid" default="buildAll" basedir=".">
	<description>
	    Build a distributable package of Fluid components.
        
        To build a distribution, type: ant
        To jsLint all source code in the source directory, type: ant validate
        To jsLint source code within a specific directory, type: ant validate -Dlint="../some/folder"
	</description>

	<!-- get environment variables and properties -->
	<property environment="env"/>
	<property file="build.properties"/>

	<!-- set up directory locations -->
    <property name="base-dir" location=".." />
    <property name="products" location="${base-dir}/products" />
	<property name="src" location="${base-dir}/src/webapp" />
	<property name="tests" location="${base-dir}/src/webapp/tests" />
	<property name="dist" location="${products}/dist" />
    <property name="src-dist" location="${products}/src-dist" />
	<property name="build" location="${base-dir}/build" />
	<property name="web-inf" location="${base-dir}/src/webapp/WEB-INF"/>
	<property name="components-build" location="${build}/components" />
	<property name="lint" location="${src}"/>

	<!-- the filename for the package to output -->
	<property name="zipfile" value="fluid-${fluid_version}" />

    <!-- the filename of the documentation PDF -->
    <property name="pdf-file" value="Fluid-${fluid_version}.pdf" />
    
    <!-- the filename of the war file -->
    <property name="warfile" value="fluid-components-${fluid_version}.war" />
    
    <!-- the filename of the js file -->
    <property name="jsfile" value="MyFluidInfusion.js" />

	<!-- task definition for JSLint -->
	<taskdef name="jslint" 
		classname="net.happygiraffe.jslint.ant.JSLintTask" 
		classpath="${jslint}" />

	<!-- Target: buildAll - the default target -->
	<target name="buildAll" depends="releaseBuild, package" description="Builds and packages the release." />

	<!-- Target: cleanup before running -->
	<target name="clean" description="Cleans up all build-related artifacts and products.">
		<delete dir="${build}" />
		<delete dir="${products}" />
	</target>

	<!-- Set up the build directory structure -->
	<target name="init">
	    <mkdir dir="${products}" />
		<mkdir dir="${build}" />			
		<mkdir dir="${dist}" />
        <mkdir dir="${src-dist}" />
	</target>

    <!-- not currently used but should be changed to do FLUID-1921 -->
    <target name="copyLicenses">
        <copy todir="${toDir}">
            <fileset dir="${base-dir}">
                <include name="LICENSE.txt" />
                <include name="README.txt" />
            </fileset>
        </copy>
    </target>
    
	<!-- Target: Minify the JS files -->
	<target name="minify">
		<description>
		Minify the specified files and copy them into the specified directory. Don't call this directly.
		</description>

		<apply executable="java" dest="${toDir}"  parallel="false">
				<!-- The files to act upon. -->	
				<fileset dir="${fromDir}" casesensitive="no">
					<include name="**/${file-pattern}" />
					<exclude name="**/test/*" />
				</fileset>

				<arg line="-jar" />
				<arg path="${yuicompressor}" />
				<srcfile/>
				<arg line="--nomunge" />
				<!-- -o option for YUI Compressor to output minified JS to a file instead of stdout. -->
				<arg line="${lineBreakArg}" />
				<arg line="-o" />
				<mapper type="glob" from="${file-pattern}" to="${file-pattern}" />
				<targetfile /> 
		</apply>
	</target>    
    
    <!-- Minifies javascript and css files and puts them into the distribution -->
	<target name="minifyBuild">
		<echo>Minifying .JS files...</echo>
		<antcall target="minify">
			<param name="fromDir" value="${build}" />
			<param name="toDir" value="${dist}" />
			<param name="file-pattern" value="*.js" />
			<param name="lineBreakArg" value="" />
		</antcall>
		
		<echo>Minifying .CSS files...</echo>
		<antcall target="minify">
			<param name="fromDir" value="${build}" />
			<param name="toDir" value="${dist}" />
			<param name="file-pattern" value="*.css" />
			<param name="lineBreakArg" value="--line-break 0" />
		</antcall>
	</target>    
    
    <target name="copyDistroFiles">
		<copy todir="${toDir}">
			<fileset dir="${base-dir}/src/webapp/">
			    <include name="integration-demos/**/*" />
			    <include name="standalone-demos/**/*" />
			    <include name="tests/**/*" />
            </fileset>
		</copy>       
    </target>
        
    <!-- Zip up the whole release bundle -->
	<target name="package">
		<description>
			Creates the release directory structure and zips it all up.
		</description>

		<echo>Zipping distribution bundle to ${dist}/${zipfile}</echo>
		<zip destfile="${products}/${zipfile}.zip" 
			basedir="${dist}"
			includes="**/*"  excludes="*.zip" />
            
        <echo>Zipping source bundle to ${dist}/${zipfile}</echo>
		<zip destfile="${products}/${zipfile}-src.zip" 
			basedir="${src-dist}"
			includes="**/*"  excludes="*.zip" />
	</target>

    <target name="copyInfusionWARFiles">
        <description>
            Copies the files required to build a war file containing Infusion.
        </description>
        
		<copy todir="${build}/war/src/webapp/infusion" >
			<fileset dir="${dist}/components"/>
            <fileset dir="${dist}/framework"/>
            <fileset dir="${dist}/lib"/>
		</copy>

		<copy todir="${build}/war/src/webapp/WEB-INF" >
			<fileset dir="${web-inf}"/>
		</copy>

		<copy todir="${build}/war">
			<fileset dir="..">
				<include name="pom.xml" />
				<include name="project.xml" />
				<include name="maven.xml" />
				<include name="project.properties" />
			</fileset>
		</copy>
    </target>
    
	<target name="buildWAR">
	    <description>
	        Builds the WAR file using Maven 2 and copies it to the distribution folder.
        </description>

        <echo>Building war file...</echo>
		<apply executable="mvn" dir="${build}/war" parallel="true">
				<fileset  dir=".">
				    <include name="pom.xml"/>
                </fileset>
				<arg value="install" />
		</apply>

        <echo>Copying war file ${build}/war/target/${warfile} to ${dist}...</echo>
		<copy todir="${dist}">
            <fileset dir="${build}/war/target">
                <include name="${warfile}" />
            </fileset>
        </copy>
	</target>
    
    <target name="buildInfusionWAR" depends="copyInfusionWARFiles, buildWAR">
       <description>
            Builds the core Infusion WAR file.
        </description>
    </target>
        
    <target name="buildDailyWAR" depends="copyInfusionWARFiles">
        <description>
            Builds a full-fledged WAR file used for the daily build, which includes sample code and tests.
        </description>
        
        <!-- Copy the additional files into the war build required for the daily build. -->
        <antcall target="copyDistroFiles">
            <param name="toDir" value="${build}/war/src/webapp/" />
        </antcall>
        
        <antcall target="buildWAR" />
    </target>

	<!-- Target: validate -->
	<target name="validate" description="Validate the javascript files using JSLint. To lint a specific folder use: -Dlint=../some/folder" >

		<echo>Validating .JS files...</echo>
        <jslint dir="${lint}" 
                excludes="${excludeFromJSLint}"
                options="browser,eqeqeq,nomen,undef">
        </jslint>
	</target>
    
    <target name="concatJavaScript" >
        <concat destfile="${components-build}/js/${jsfile}" >
            <fileset dir="${src}" includes="${myFileNames}" /> 
        </concat>    
    </target>
    
    <!-- Runs the javascript dependency resolver which sets $myDirs and $myFileNames -->
    <target name="resolveDependencies" depends="clean">
        <script language="javascript" src="build.js" />
    </target>

    <target name="buildSrcBundle" depends="copySourceToBuild">
        <description>
            Builds a complete source release bundle.
        </description>
        
        <copy todir="${src-dist}">
            <fileset dir="${build}" />
        </copy>
        
        <antcall target="copyDistroFiles">
			<param name="toDir" value="${src-dist}" />
		</antcall>
    </target>
    
    <target name="buildDeployBundle" depends="copySourceToBuild">
        <description>
            Builds a complete minified deployment release bundle.
        </description>
        
        <!-- Copy everything but the JavaScript and CSS we are about to minify -->
		<copy todir="${dist}">
			<fileset dir="${build}" excludes="**/*.js,**/*.css" />
		</copy>
        
        <!-- Minify and copy JavaScript and CSS into the build directory -->
	    <antcall target="minifyBuild" />
        
        <!-- Create the build products -->
        <antcall target="copyDistroFiles">
			<param name="toDir" value="${dist}" />
		</antcall>
    </target>
    
    <target name="copySourceToBuild" depends="clean, init, resolveDependencies, concatJavaScript">
        <copy todir="${build}">
            <fileset dir="${src}" includes="${myDirs}" />
        </copy>
    </target> 

    <target name="releaseBuild" depends="buildSrcBundle, buildDeployBundle, buildInfusionWAR" 
        description="Builds the full release">
    </target>
    
    <target name="dailyBuild" depends="buildSrcBundle, buildDeployBundle, buildDailyWAR"
        description="Builds everything required for the daily build">
    </target>

    <target name="customBuild" depends="releaseBuild, package" 
        description="Builds a custom package. Use -Dinclude and -Dexclude to specify which modules you want.">
    </target>
    
</project>
